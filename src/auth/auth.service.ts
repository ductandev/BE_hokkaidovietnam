import { HttpException, Injectable } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';
import { JwtService } from '@nestjs/jwt';
import { errorCode, failCode, successCode, successCodeAuth } from 'src/Config/response';
import { Response } from 'express';
// TH∆Ø VI·ªÜN M√É H√ìA PASSWORD
// yarn add bcrypt
import * as bcrypt from 'bcrypt';
import { ForgotPasswordDto, UserSignInDto, resetPasswordDto } from './dto/auth.dto';
import { UserSignUpType } from './entities/auth.entity';
// Th∆∞ vi·ªán g·ª≠i email
import { MailerService } from '@nestjs-modules/mailer';


@Injectable()
export class AuthService {
  constructor(
    private jwtService: JwtService,
    private readonly mailService: MailerService
  ) { }

  model = new PrismaClient();


  // =============================================
  //                  ƒêƒÇNG NH·∫¨P
  // =============================================
  async signIn(body: UserSignInDto, res: Response) {
    try {
      // -------------------------------------------
      // ƒêƒÉng nh·∫≠p b·∫±ng c·∫£ email v√† s·ªë ƒëi·ªán tho·∫°i
      // -------------------------------------------
      let { email_or_phone, mat_khau } = body;

      let user = await this.model.nguoiDung.findFirst({
        where: {
          OR: [
            { email: email_or_phone },
            { so_dien_thoai: email_or_phone }
          ],
          // email,
          // vai_tro_id: { not: 3 }
          // Lo·∫°i b·ªè tr∆∞·ªùng h·ª£p c√≥ "vai_tro_id = 3" ho·∫∑c "mat_khau =r·ªóng "
          NOT: [
            { vai_tro_id: 3 },
            { mat_khau: '' }
          ],
          isDelete: false
        },
      });

      if (user) {
        // check password
        let checkPass = bcrypt.compareSync(mat_khau, user.mat_khau);    //: tham s·ªë 1: d·ªØ li·ªáu ch∆∞a m√£ h√≥a, tham s·ªë 2: d·ªØ li·ªáu ƒë√£ m√£ h√≥a
        if (checkPass == true) {
          // ‚≠ê ƒë·ªÉ 30day ‚≠ê
          let token = this.jwtService.sign({ data: user }, { secret: 'NODE' },); // Kh√≥a b√≠ m·∫≠t b√™n files "jwt.strategy.ts"
          successCodeAuth(res, user, token, 200, 'Login th√†nh c√¥ng !');
        } else {
          failCode(res, '', 400, 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng !');
        }
      } else {
        failCode(res, '', 400, 'Email ho·∫∑c SƒêT kh√¥ng ƒë√∫ng ho·∫∑c ch∆∞a ƒë∆∞·ª£c ƒëƒÉng k√Ω !');
      }
    } catch (exception) {
      console.log('üöÄ ~ file: auth.service.ts:46 ~ AuthService ~ signIn ~ exception:', exception,);
      errorCode(res, 'L·ªói BE');
    }
  }


  // =============================================
  //                  ƒêƒÇNG K√ù
  // =============================================
  async signUp(body: UserSignUpType, res: Response) {
    try {
      let { ho_ten, email, mat_khau, dia_chi, phuong_id, quan_id, tinh_thanh_id, so_dien_thoai, gioi_tinh } = body;

      let checkUserEmail = await this.model.nguoiDung.findMany({
        where: {
          email,
          isDelete: false
        },
      });

      // Ki·ªÉm tra xem trong danh s√°ch ng∆∞·ªùi d√πng ƒë√£ c√≥ Email v·ªõi vai_tro_id l√† 2 hay kh√¥ng
      if (checkUserEmail.some(user => user.vai_tro_id !== 3)) {
        return failCode(res, '', 400, 'Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥ !');
      }

      let checkUserPhone = await this.model.nguoiDung.findMany({
        where: {
          so_dien_thoai,
          isDelete: false
        },
      });

      // Ki·ªÉm tra xem trong danh s√°ch ng∆∞·ªùi d√πng ƒë√£ c√≥ SƒêT v·ªõi vai_tro_id l√† 2 hay kh√¥ng
      if (checkUserPhone.some(user => user.vai_tro_id !== 3)) {
        return failCode(res, '', 400, 'S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥ !');
      }


      // N·∫øu kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o v·ªõi vai_tro_id l√† 2, v√† ch·ªâ c√≥ nhi·ªÅu ng∆∞·ªùi d√πng v·ªõi vai_tro_id l√† 3,
      // th√¨ t·∫°o t√†i kho·∫£n m·ªõi cho ng∆∞·ªùi d√πng v·ªõi vai_tro_id l√† 3
      if (checkUserPhone.length !== 0 && checkUserPhone[0].vai_tro_id === 3 && checkUserPhone[0].mat_khau === '') {
        const updateInfoUser = await this.model.nguoiDung.update({
          where: {
            nguoi_dung_id: checkUserPhone[0].nguoi_dung_id,
            isDelete: false
          },
          data: {
            vai_tro_id: 2,
            ho_ten,
            email,
            mat_khau: await bcrypt.hash(mat_khau, 10),
            dia_chi,
            phuong_id,
            quan_id,
            tinh_thanh_id,
            so_dien_thoai,
            gioi_tinh
          }
        });
        return successCode(res, updateInfoUser, 201, 'ƒêƒÉng k√Ω th√†nh c√¥ng !');
      }


      let newData = {
        ho_ten,
        email,
        mat_khau: await bcrypt.hash(mat_khau, 10), //  thay ƒë·ªïi bcrypt.hashSync th√†nh await bcrypt.hash ƒë·ªÉ s·ª≠ d·ª•ng h√†m hash b·∫•t ƒë·ªìng b·ªô. ƒêi·ªÅu n√†y c·∫ßn thi·∫øt ƒë·ªÉ tr√°nh blocking thread ch√≠nh khi m√£ h√≥a m·∫≠t kh·∫©u.
        dia_chi,
        phuong_id,
        quan_id,
        tinh_thanh_id,
        so_dien_thoai,
        gioi_tinh,
      };

      await this.model.nguoiDung.create({
        data: newData,
      });

      successCode(res, newData, 201, 'ƒêƒÉng k√Ω th√†nh c√¥ng !');
    } catch (exception) {
      console.log("üöÄ ~ file: auth.service.ts:137 ~ AuthService ~ signUp ~ exception:", exception);
      errorCode(res, 'L·ªói BE');
      // errorCode(res, `L·ªói BE: ${exception}`);
    }
  }

  // =============================================
  //                  RELOAD
  // =============================================
  async getReload(req: Request, res: Response) {
    try {
      // ------------------- CHECK TOKEN---------------------
      const token = req.headers['authorization']?.split(' ')[1];
      if (!token) {
        return failCode(res, '', 401, 'Y√™u c·∫ßu token !');
      }
      const user = this.jwtService.verify(token);
      let nguoi_dung_id = +user.data.nguoi_dung_id
      // ----------------------------------------------------
      let checkUser = await this.model.nguoiDung.findFirst({
        where: {
          nguoi_dung_id,
          // Lo·∫°i b·ªè tr∆∞·ªùng h·ª£p c√≥ "vai_tro_id = 3" ho·∫∑c "mat_khau = r·ªóng "
          NOT: [
            { vai_tro_id: 3 },
            { mat_khau: '' }
          ],
          isDelete: false
        }
      })

      if (checkUser === null) {
        failCode(res, checkUser, 400, "Ng∆∞·ªùi d√πng ID kh√¥ng t·ªìn t·∫°i, vui l√≤ng ki·ªÉm tra l·∫°i token !")
      }

      // s·ª≠ d·ª•ng destructuring ƒë·ªÉ lo·∫°i b·ªè tr∆∞·ªùng "mat_khau" kh·ªèi ƒë·ªëi t∆∞·ª£ng checkUser.
      const { mat_khau, ...userWithoutPassword } = checkUser;

      successCode(res, userWithoutPassword, 200, 'Login th√†nh c√¥ng !');
    }
    catch (exception) {
      console.log("üöÄ ~ file: auth.service.ts:188 ~ AuthService ~ getReload ~ exception:", exception);
      errorCode(res, 'L·ªói BE');
    }
  }

  // =============================================
  //        G·ª¨I TH∆Ø X√ÅC TH·ª∞C QU√äN M·∫¨T KH·∫®U 
  // =============================================
  async sendMailer(body: ForgotPasswordDto, res: Response) {
    try {
      let { email } = body

      let checkEmail = await this.model.nguoiDung.findFirst({
        where: {
          email,
          vai_tro_id: 2,
          isDelete: false
        }
      })

      if (checkEmail === null) {
        return failCode(res, '', 400, "Email kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒëƒÉng k√Ω !")
      }

      let token = this.jwtService.sign({ data: checkEmail }, { expiresIn: '15m', secret: 'NODE' },); // Kh√≥a b√≠ m·∫≠t b√™n files "jwt.strategy.ts"

      // // T·∫°o OTP ng·∫´u nhi√™n 6 ch·ªØ s·ªë t·ª´ 000000 ƒë·∫øn 999999
      // const otp = Math.floor(Math.random() * 1000000).toString().padStart(6, '0');

      const message = `
      <h1>Qu√™n m·∫≠t kh·∫©u</h1>
      <p> <b>Dear</b> ${checkEmail.ho_ten},</p>
      <p>ƒê√¢y l√† th∆∞ x√°c nh·∫≠n thay ƒë·ªïi m·∫≠t kh·∫©u:</p>
      <a href="${process.env.URL}/forgot-password/${token}">Vui l√≤ng nh·∫•n v√†o ƒë√¢y ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u.</a>
      <p><b>Li√™n k·∫øt c√≥ hi·ªáu l·ª±c 15 ph√∫t.</b></p>
    `;

      let data = await this.mailService.sendMail({
        from: 'No Reply <daotaotainangtrevn@gmail.com>',
        to: email,
        subject: `Thay ƒë·ªïi m·∫≠t kh·∫©u ng∆∞·ªùi d√πng Hokkaido Vi·ªát Nam`,
        html: message, // S·ª≠ d·ª•ng thu·ªôc t√≠nh html thay v√¨ text
      });

      await this.model.resetPassword.create({
        data: {
          token
        }
      })

      successCode(res, data, 200, 'G·ª≠i x√°c th·ª±c email th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p Email ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u !');
    }
    catch (error) {
      console.log("üöÄ ~ file: auth.service.ts:235 ~ AuthService ~ sendMailer ~ error:", error);
      errorCode(res, 'L·ªói BE');
    }
  }

  // =============================================
  //              RESET M·∫¨T KH·∫®U
  // =============================================
  async resetPassword(req: Request, body: resetPasswordDto, res: Response) {
    try {
      // ------------------- CHECK TOKEN---------------------
      const token = req.headers['authorization']?.split(' ')[1];
      if (!token) {
        return failCode(res, '', 401, 'Y√™u c·∫ßu token !');
      }
      const user = this.jwtService.verify(token);
      // ----------------------------------------------------

      // Ki·ªÉm tra token trog DB c√≥ t·ªìn t·∫°i hay kh√¥ng 
      const checkTokenDB = await this.model.resetPassword.findFirst({
        where: {
          token
        }
      })

      if (!checkTokenDB) {
        return failCode(res, '', 401, "D·ªØ li·ªáu Token kh√¥ng t·ªìn t·∫°i !")
      }

      let { newPassword } = body;

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
      const updateUser = await this.model.nguoiDung.update({
        where: user.data,
        data: {
          mat_khau: await bcrypt.hash(newPassword, 10),
        }
      })

      // X√≥a token trong DB
      await this.model.resetPassword.delete({
        where: {
          id: checkTokenDB.id
        }
      })

      successCode(res, updateUser, 200, "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng !")
    } catch (error) {
      console.log("üöÄ ~ file: auth.service.ts:271 ~ AuthService ~ resetPassword ~ error:", error);
      errorCode(res, "L·ªói BE")
    }
  }

}